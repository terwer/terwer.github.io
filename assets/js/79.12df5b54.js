(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{436:function(t,v,e){"use strict";e.r(v);var _=e(8),a=Object(_.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"分布式架构服务调用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分布式架构服务调用"}},[t._v("#")]),t._v(" 分布式架构服务调用")]),t._v(" "),v("h3",{attrs:{id:"服务调用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#服务调用"}},[t._v("#")]),t._v(" 服务调用")]),t._v(" "),v("p",[t._v("和传统单体架构相比，分布式多了一个远程服务之间的通信，不管soa还是微服务，本质都是对业务服务的提炼和复用。")]),t._v(" "),v("p",[t._v("远程服务之间的调用，才是实现分布式的关键因素。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/terwer/upload/img/image-20220411220220544.png",alt:"image-20220411220220544"}})]),t._v(" "),v("h3",{attrs:{id:"实现方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实现方式"}},[t._v("#")]),t._v(" 实现方式")]),t._v(" "),v("h4",{attrs:{id:"http通信协议的框架"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http通信协议的框架"}},[t._v("#")]),t._v(" HTTP通信协议的框架")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("HttpURLConnection")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html"),v("OutboundLink")],1)]),t._v(" "),v("p",[t._v("java原生的HttpURLConnection是基于http协议的，支持get，post，put，delete等各种请求方式，最常用的是get和post")])]),t._v(" "),v("li",[v("p",[t._v("Apache Common HttpClient")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://hc.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://hc.apache.org/"),v("OutboundLink")],1)]),t._v(" "),v("p",[t._v("HttpClient是Apache Common的子项目，可以提供高效的、最新的、功能丰富的支持http协议的客户端编程工具包，并且支持http协议的最新版本。")]),t._v(" "),v("ul",[v("li",[t._v("实现了所有的http方法，get，post，put，delete等")]),t._v(" "),v("li",[t._v("支持https协议")]),t._v(" "),v("li",[t._v("支持代理服务器")])]),t._v(" "),v("p",[t._v("备注：熔断机制探索。")])]),t._v(" "),v("li",[v("p",[t._v("OKhttp3")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://github.com/square/okhttp",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/square/okhttp"),v("OutboundLink")],1)]),t._v(" "),v("p",[t._v("OKhttp是主流的网络请求开源框架，用于替代HttpURLConnection和Apache HttpClient。")]),t._v(" "),v("ul",[v("li",[t._v("支持http2.0，对一台机器的请求共享一个socket")]),t._v(" "),v("li",[t._v("采用连接池技术，可以有效的减少请求数量")]),t._v(" "),v("li",[t._v("无缝集成gzip压缩")]),t._v(" "),v("li",[t._v("支持Respose Cache，避免重复请求")]),t._v(" "),v("li",[t._v("域名多ip支持")])])]),t._v(" "),v("li",[v("p",[t._v("RestTemplate")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html"),v("OutboundLink")],1)]),t._v(" "),v("p",[t._v("Spring RestTemplate是Spring提供的访问Rest服务的客户端。")]),t._v(" "),v("p",[t._v("RestTemplate提供了多种便捷访问http服务的方法，能够大大提高客户端的效率，很多第三方都是用RestTemplate提供服务，例如Android。")]),t._v(" "),v("ul",[v("li",[t._v("面向URL组件，必须依赖主机+端口+URI")]),t._v(" "),v("li",[t._v("RestTemplate不依赖于服务接口，仅关注Rest响应内容")]),t._v(" "),v("li",[t._v("Spring Cloud Feign")])])])]),t._v(" "),v("h4",{attrs:{id:"rpc框架"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rpc框架"}},[t._v("#")]),t._v(" RPC框架")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("Java RMI")]),t._v(" "),v("p",[t._v("Java RMI（Remote Method  Invocation）是一种基于Java的远程方法调用技术，是java 持有的一种RPC实现。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/terwer/upload/img/image-20220411224754951.png",alt:"image-20220411224754951"}})])]),t._v(" "),v("li",[v("p",[t._v("Hessian")]),t._v(" "),v("p",[t._v("Hessian是一个轻量级的remoting onhttp工具，使用简单的方法提供了RMI功能，相比WebService，Hessian更加简单、快捷。采用的是二进制RPC协议，因为采用的二进制协议，因此它更适合于发送二进制数据。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/terwer/upload/img/image-20220411225103011.png",alt:"image-20220411225103011"}})])]),t._v(" "),v("li",[v("p",[t._v("Dubbo")]),t._v(" "),v("p",[t._v("Dubbo是阿里开源的高性能的RPC框架，使应用可以通过高性能的RPC实现服务的输入和输出功能，可以和Spring框架无缝集成。")]),t._v(" "),v("p",[t._v("Dubbo是一款高性能、轻量级的RPC框架，主要提供三大核心能力：面向接口的远程方法调用、智能容错和负载均衡，以及服务的自动注册与发现。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/terwer/upload/img/image-20220411225808449.png",alt:"image-20220411225808449"}})])]),t._v(" "),v("li",[v("p",[t._v("gRPC")]),t._v(" "),v("p",[t._v("gRPC是Google公司开源的一款高性能的远程过程调用（RPC）框架，可以再任何环境运行。")]),t._v(" "),v("p",[t._v("该框架提供了负载均衡、跟踪、智能监控、身份验证等功能，可以实现系统之间的高效连接。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/terwer/upload/img/image-20220411230203277.png",alt:"image-20220411230203277"}})])])]),t._v(" "),v("h3",{attrs:{id:"跨域调用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#跨域调用"}},[t._v("#")]),t._v(" 跨域调用")]),t._v(" "),v("h4",{attrs:{id:"跨域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),v("p",[t._v("在分布式系统中，调用其他系统，可能出现跨域问题。")]),t._v(" "),v("p",[t._v("跨域的实质是浏览器的一种保护处理。")]),t._v(" "),v("p",[t._v("如果产生了跨域，服务器在返回结果时候会被浏览器拦截（请求是正常发起的，只是浏览器进行了拦截），导致响应内容不可用。")]),t._v(" "),v("p",[t._v("可能产生跨域的情况有以下几种：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("当前页面URL")]),t._v(" "),v("th",[t._v("被请求页面的URL")]),t._v(" "),v("th",[t._v("是否跨域")]),t._v(" "),v("th",[t._v("原因")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("http://www.test.com")]),t._v(" "),v("td",[t._v("http://www.test.com/index.html")]),t._v(" "),v("td",[t._v("否")]),t._v(" "),v("td",[t._v("同源（协议，域名，端口相同）")])]),t._v(" "),v("tr",[v("td",[t._v("http://www.test.com")]),t._v(" "),v("td",[t._v("Https://www.test.com/index.html")]),t._v(" "),v("td",[t._v("跨域")]),t._v(" "),v("td",[t._v("协议不同（http/https）")])]),t._v(" "),v("tr",[v("td",[t._v("http://www.test.com")]),t._v(" "),v("td",[t._v("http://www.baidu.com")]),t._v(" "),v("td",[t._v("跨域")]),t._v(" "),v("td",[t._v("主域名不同（test/baidu）")])]),t._v(" "),v("tr",[v("td",[t._v("http://www.test.com")]),t._v(" "),v("td",[t._v("http://sub.test.com")]),t._v(" "),v("td",[t._v("跨域")]),t._v(" "),v("td",[t._v("子域名不同（www/sub）")])]),t._v(" "),v("tr",[v("td",[t._v("http://www.test.com:8080")]),t._v(" "),v("td",[t._v("http://www.test.com:8090")]),t._v(" "),v("td",[t._v("跨域")]),t._v(" "),v("td",[t._v("端口号不同（8080/8090）")])])])]),t._v(" "),v("h4",{attrs:{id:"跨域解决方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#跨域解决方案"}},[t._v("#")]),t._v(" 跨域解决方案")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("使用jsonp解决跨域问题")]),t._v(" "),v("p",[t._v("缺点：不支持post请求，代码书写复杂")])]),t._v(" "),v("li",[v("p",[t._v("使用HttpClient内部转发")])]),t._v(" "),v("li",[v("p",[t._v("设置响应头允许跨域")]),t._v(" "),v("p",[t._v('respose.setHeader("Access-Control-Allow-Origin", "*");')])]),t._v(" "),v("li",[v("p",[t._v("基于Nginx搭建企业级API网关")])]),t._v(" "),v("li",[v("p",[t._v("使用zuul搭建微服务API网关")]),t._v(" "),v("p",[t._v("zuul是Spring Cloud的微服务网关。")]),t._v(" "),v("p",[t._v("网关：一个网络 整体系统中，前置门户入口。")]),t._v(" "),v("p",[t._v("请求首先经过网关，进行路径的路由，定位到具体的服务节点上。")]),t._v(" "),v("p",[t._v("可以使用zuul过滤器的请求转发来解决跨域问题。")])])])])}),[],!1,null,null,null);v.default=a.exports}}]);