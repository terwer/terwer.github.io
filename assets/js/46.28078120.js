(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{403:function(v,e,_){"use strict";_.r(e);var a=_(8),t=Object(a.a)({},(function(){var v=this,e=v._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"nio编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nio编程"}},[v._v("#")]),v._v(" nio编程")]),v._v(" "),e("h3",{attrs:{id:"nio介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nio介绍"}},[v._v("#")]),v._v(" NIO介绍")]),v._v(" "),e("p",[v._v("Java NIO，全称为 "),e("code",[v._v("java non-blocking IO")]),v._v(" ，是指JDK提供得到新API。从JDK1.4开始，Java提供了一系列改进的输入/输出的新特性，被统称为NIO（New IO），是同步非阻塞的。")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("NIO有三大核心部分，Channel（通道），Buffer（缓冲区），Selector（选择器）。")])]),v._v(" "),e("li",[e("p",[v._v("NIO是面向缓冲区编程。")]),v._v(" "),e("p",[v._v("数据读取到一个缓冲区中，需要时可以再缓冲区前后移动，增加了处理过程中的灵活性，使用它可以提供非阻塞式的高伸缩网络。")])]),v._v(" "),e("li",[e("p",[v._v("Java NIO的非阻塞模式，使一个线程从通道发送或者读取数据，但是它仅能得到目前可用的数据。如果目前没有数据可用时，就什么都不会获取，而不是保持线程阻塞。所以只至数据变的可用之前，该线程可以继续做其他事情。")]),v._v(" "),e("p",[v._v("非阻塞写也是这样，一个线程请求写入一些数据到某个通道，但是不需要等待它完全写入，这个线程可以去做别的事情。")]),v._v(" "),e("p",[v._v("通俗理解：NIO可以做到用一个线程来处理多个操作。")]),v._v(" "),e("p",[v._v("假设有10000个请求过来，根据实际情况，可以分配50或者100个线程来处理。而不是像之前阻塞IO那样，必须分配10000个线程。")])])]),v._v(" "),e("h3",{attrs:{id:"nio和bio的比较"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nio和bio的比较"}},[v._v("#")]),v._v(" NIO和BIO的比较")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("BIO以流的方式处理数据，NIO以缓冲区方式处理数据，缓冲区I/O效率比流I/O效率高很多。")])]),v._v(" "),e("li",[e("p",[v._v("BIO是阻塞的，NIO是非阻塞的")])]),v._v(" "),e("li",[e("p",[v._v("BIO基于字节流和字符流进行操作，NIO基于Channel（通道）和Buffer（缓冲区）进行操作，数据总是从通道读取到缓冲区，或者从缓冲区写入通道。")]),v._v(" "),e("p",[v._v("Selector（选择器）用于监听多个通道的事件（连接请求、数据到达等），因此单个线程可以监听多个客户端通道。")])])]),v._v(" "),e("h3",{attrs:{id:"nio三大核心原理示意图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nio三大核心原理示意图"}},[v._v("#")]),v._v(" NIO三大核心原理示意图")]),v._v(" "),e("p",[v._v("NIO的Selector、Channel、Buffer的关系")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/terwer/upload/img/image-20220418160840098.png",alt:"image-20220418160840098"}})]),v._v(" "),e("ol",[e("li",[e("p",[v._v("每个Channel都会对应一个Buffer")])]),v._v(" "),e("li",[e("p",[v._v("Selector对应一个线程，一个线程对应多个Channel（连接）")])]),v._v(" "),e("li",[e("p",[v._v("每个Channel都注册到选择器上")])]),v._v(" "),e("li",[e("p",[v._v("Selector不断轮询查看Channel上的事件，事件是Channel（通道）的重要概念")])]),v._v(" "),e("li",[e("p",[v._v("Selector会根据不同的事件完成不同的操作")])]),v._v(" "),e("li",[e("p",[v._v("Buffer是一个内存块，底层是一个数组")])]),v._v(" "),e("li",[e("p",[v._v("数据的读取和写入都是通过Buffer。")]),v._v(" "),e("p",[v._v("跟BIO有区别，BIO中，要么是输入流，要么是输出流，不能是双向的。")]),v._v(" "),e("p",[v._v("NIO的Buffer可读可写，Channel是双向的。")])])])])}),[],!1,null,null,null);e.default=t.exports}}]);