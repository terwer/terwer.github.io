(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{388:function(t,s,a){"use strict";a.r(s);var e=a(8),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"为什么要自定义框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要自定义框架"}},[t._v("#")]),t._v(" 为什么要自定义框架")]),t._v(" "),s("p",[t._v("解决JDBC存在的那些问题[^1]，同时理解MyBatis的底层原理。")]),t._v(" "),s("h2",{attrs:{id:"核心要点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心要点"}},[t._v("#")]),t._v(" 核心要点")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("解析配置文件")]),t._v(" "),s("ul",[s("li",[t._v("数据库配置信息")]),t._v(" "),s("li",[t._v("sql 的封装")])])]),t._v(" "),s("li",[s("p",[t._v("构建 SqlSessionFactory，注意这里的 openSession 方法")])]),t._v(" "),s("li",[s("p",[t._v("拿到 SqlSesion")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("定义 SqlSession 基本方法")])]),t._v(" "),s("li",[s("p",[t._v("封装具体的执行逻辑，Executor")]),t._v(" "),s("p",[t._v("Execute 的 query 方法就对应 jdbc 操作")])]),t._v(" "),s("li",[s("p",[t._v("优化，使用 JDK 动态代理避免 statementId 的硬编码")])])])]),t._v(" "),s("li",[s("p",[t._v("将 SqlSession 的操作封装到 DAO 层")])])]),t._v(" "),s("h2",{attrs:{id:"使用端-项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用端-项目"}},[t._v("#")]),t._v(" 使用端（项目）")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("引入自定义持久层框架的 jar 包")])]),t._v(" "),s("li",[s("p",[t._v("提供两部分配置信息")]),t._v(" "),s("ul",[s("li",[t._v("数据库配置信息")]),t._v(" "),s("li",[t._v("sql 配置信息：sql 语句、参数类型、返回值类型")])])]),t._v(" "),s("li",[s("p",[t._v("使用配置文件来提供这两部分配置信息：")])])]),t._v(" "),s("p",[t._v("（1）"),s("code",[t._v("sqlMapConfig.xml")]),t._v(" ：存放数据库配置信息，存放 "),s("code",[t._v("mapper.xml")]),t._v(" 的全路径")]),t._v(" "),s("p",[t._v("（2）"),s("code",[t._v("mapper.xml")]),t._v("  ：存放 sql 配置信息")]),t._v(" "),s("h2",{attrs:{id:"自定义持久层框架本身-工程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义持久层框架本身-工程"}},[t._v("#")]),t._v(" 自定义持久层框架本身（工程）")]),t._v(" "),s("p",[t._v("本质是对 JDBC 代码进行封装")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("加载配置文件")]),t._v(" "),s("p",[t._v("根据配置文件的路径记载成字节输入流，存储到内存中")]),t._v(" "),s("p",[t._v("创建 Resources 类")]),t._v(" "),s("p",[t._v("方法："),s("code",[t._v("InputStream getResourceAsStream(String path)")])])]),t._v(" "),s("li",[s("p",[t._v("创建两个 JavaBean（容器对象）：存放的是配置文件解析出来的内容")]),t._v(" "),s("p",[t._v("Configuration：核心配置类，存放 "),s("code",[t._v("sqlMapConfig.xml")]),t._v(" 解析出来的内容")]),t._v(" "),s("p",[t._v("MappedStatement：映射配置类，存放 "),s("code",[t._v("mapper.xml")]),t._v(" 解析出来的内容")])]),t._v(" "),s("li",[s("p",[t._v("解析配置文件：dom4j")]),t._v(" "),s("p",[t._v("创建类：sqlSessionFactoryBuilder 类，方法 "),s("code",[t._v("build(InputStream in)")])]),t._v(" "),s("p",[t._v("1、使用 dom4j 解析配置文件，将解析出来的内容封装到威器对象中")]),t._v(" "),s("p",[t._v("2、创建 SqlSessionFactory 对象，生产 SqlSession（会话对象），工厂模式")])]),t._v(" "),s("li",[s("p",[t._v("创建 SqlSessionFactory 以及实现类 DefaultSqlSessionFactory")]),t._v(" "),s("p",[s("code",[t._v("openSession()")]),t._v("：生产 SqlSession")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("创建 SqlSession 接口及实现类 DefaultSqlSession")]),t._v(" "),s("p",[t._v("定义对数据库的 CRUD 操作：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("selectList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("selectOne")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])])])])]),t._v(" "),s("li",[s("p",[t._v("创建 Executor 实现类以及实现类 SimpleExecutor")]),t._v(" "),s("p",[s("code",[t._v("query(Configuration configuration, MappedStatement mappedStatement, Object... params)")]),t._v("：执行 JDBC 代码")])])]),t._v(" "),s("blockquote",[s("p",[t._v("文章更新历史"),s("br"),t._v("\n2022/05/08 feat:新增 Kotlin 版代码实现"),s("br"),t._v("\n2022/03/14 feat:初稿")])]),t._v(" "),s("p",[t._v("[^1]: ### JDBC 问题总结")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("原始 jdbc 开发存在的问题如下:\n\n1、 数据库连接创建、释放频繁造成系统资源浪费，从而影响系统性能。\n\n2、 Sql 语句在代码中硬编码，造成代码不易维护，实际应用中 sql 变化的可能较大，sql 变动需要改变 java 代码。\n\n3、 使用 preparedStatement 向占有位符号传参数存在硬编码，因为 sql 语句的 where 条件不一定，可能多也可能少，修改 sql 还要修改代码，系统不易维护。\n\n4、 对结果集解析存在硬编码(查询列名)，sql 变化导致解析代码变化，系统不易维护，如果能将数据库记录封装成 pojo 对象解析比较方便\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);