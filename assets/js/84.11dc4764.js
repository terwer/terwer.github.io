(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{441:function(t,n,a){"use strict";a.r(n);var e=a(8),s=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"服务熔断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#服务熔断"}},[t._v("#")]),t._v(" 服务熔断")]),t._v(" "),n("h5",{attrs:{id:"什么是服务熔断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是服务熔断"}},[t._v("#")]),t._v(" 什么是服务熔断")]),t._v(" "),n("p",[t._v("牺牲局部，保存整体的措施叫做熔断。")]),t._v(" "),n("p",[t._v("不采取熔断的后果，例子：")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/terwer/upload/img/image-20220412134933476.png",alt:"image-20220412134933476"}})]),t._v(" "),n("p",[t._v("一旦下游服务C变的不可用，积压了大量请求，服务B的请求也会随之阻塞。")]),t._v(" "),n("p",[t._v("线程资源逐渐耗尽，使得服务B也变的不可用。紧接着，服务A也会变得不可用，整个服务链路被拖垮。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/terwer/upload/img/image-20220412135224506.png",alt:"image-20220412135224506"}})]),t._v(" "),n("p",[t._v("这种调用链路的连锁故障，叫做雪崩。")]),t._v(" "),n("h5",{attrs:{id:"熔断机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#熔断机制"}},[t._v("#")]),t._v(" 熔断机制")]),t._v(" "),n("p",[t._v("可以采用熔断机制来解决上面的问题。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/terwer/upload/img/image-20220412135744686.png",alt:"image-20220412135744686"}})]),t._v(" "),n("p",[t._v("需要注意两点：")]),t._v(" "),n("ol",[n("li",[t._v("开启熔断")])]),t._v(" "),n("p",[t._v("在固定时间窗口内，接口调用超时比例达到一个阈值，会开启熔断。")]),t._v(" "),n("p",[t._v("进入熔断状态后，后续对该服务的调用，不再经过网络，而是调用本地的默认方法，达到服务降级的效果。")]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("熔断恢复")])]),t._v(" "),n("p",[t._v("熔断不是永久的，经过了熔断超时时间之后，服务将从熔断状态恢复，再次接受调用方的远程调用。")]),t._v(" "),n("h5",{attrs:{id:"熔断机制的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#熔断机制的实现"}},[t._v("#")]),t._v(" 熔断机制的实现")]),t._v(" "),n("ol",[n("li",[t._v("Spring Cloud Hystrix")])]),t._v(" "),n("p",[t._v("Spring Cloud Hystrix是基于Netflix的开源框架Hystrix实现的，该框架实现了服务熔断、线程隔离等一系列服务保护功能。")]),t._v(" "),n("p",[t._v("对熔断机制的实现，Hystrix设计了三种状态：\n- 熔断关闭状态（Closed）")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("  服务没有故障时，熔断器所处的状态，对调用方的调用不作任何限制。\n- 熔断开启状态（Open）\n  \n  在固定时间内，Hystrix默认是10s，接口调用出错比例达到一个阈值，Hystrix默认是50%，就会进入熔断状态。\n  \n  进入熔断状态后，后续对该服务接口的调用，不再经过网络，而是调用本地的fallback方法。\n- 半熔断状态（Half-Open）\n  \n  在进入熔断开启状态一段时间后，Hystrix默认是5s，容器会进入半熔断状态。\n  \n  半熔断状态尝试恢复服务调用，允许有限的流量调用该服务，并监控调用成功率。如果成功率达到预期，说明服务已经恢复，提前进入熔断关闭状态。如果成功率依然很低，则重新进入熔断开启状态。\n  \n     三个状态的转化关系如下：\n  \n     ![image-20220412143208192](https://cdn.jsdelivr.net/gh/terwer/upload/img/image-20220412143208192.png)\n  \n  2. Sentinel\n  \n     [https://github.com/alibaba/Sentinel](https://github.com/alibaba/Sentinel)\n  \n     Sentinel和Hystrix的原则是一致的：当调用链路中，某个资源出现不稳定，例如，表现为timeout，异常比例升高的时候，则对这个资源的的调用进行限制，并让请求快速失败，避免影响到其他资源，导致最终产生雪崩。\n  \n     Sentinel的熔断手段：\n- 通过并发线程数进行限制\n- 通过响应时间对资源进行降级\n- 系统负载保护")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);