(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{443:function(v,_,a){"use strict";a.r(_);var t=a(8),e=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("本文介绍了一个良好的可扩展性的架构需要遵守的原则。")]),v._v(" "),_("h1",{attrs:{id:"架构设计基本原则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#架构设计基本原则"}},[v._v("#")]),v._v(" 架构设计基本原则")]),v._v(" "),_("blockquote",[_("p",[v._v("2022/04/16 校对完成")]),v._v(" "),_("p",[v._v("文章更新历史")]),v._v(" "),_("p",[v._v("2022/04/16 初稿。")])]),v._v(" "),_("h2",{attrs:{id:"开闭原则-ocp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则-ocp"}},[v._v("#")]),v._v(" 开闭原则（OCP）")]),v._v(" "),_("blockquote",[_("p",[_("strong",[_("code",[v._v("OCP")])]),v._v(" , "),_("code",[v._v("Open Close Principle")]),v._v(" 开闭原则")])]),v._v(" "),_("h3",{attrs:{id:"开闭原则的定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则的定义"}},[v._v("#")]),v._v(" 开闭原则的定义")]),v._v(" "),_("p",[v._v("开闭原则：软件实体应该对扩展开放，对修改关闭")]),v._v(" "),_("p",[v._v("软件实体包含几个部分")]),v._v(" "),_("ol",[_("li",[v._v("项目中划分出来的模块")]),v._v(" "),_("li",[v._v("类与接口")]),v._v(" "),_("li",[v._v("方法")])]),v._v(" "),_("p",[v._v("开闭原则的含义：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新需求。")]),v._v(" "),_("h3",{attrs:{id:"开闭原则的作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则的作用"}},[v._v("#")]),v._v(" 开闭原则的作用")]),v._v(" "),_("p",[v._v("使软件实体拥有一定的适应性和灵活性，同时兼备稳定性和延续性。作用如下：")]),v._v(" "),_("ol",[_("li",[v._v("对软件测试的影响")]),v._v(" "),_("li",[v._v("提高代码的可复用性")]),v._v(" "),_("li",[v._v("提高代码的可维护性")])]),v._v(" "),_("h3",{attrs:{id:"开闭原则的实现方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则的实现方法"}},[v._v("#")]),v._v(" 开闭原则的实现方法")]),v._v(" "),_("p",[v._v("可通过“"),_("strong",[v._v("抽象约束、封装变化")]),v._v("”来实现开闭原则。")]),v._v(" "),_("p",[v._v("通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，将可变因素封装在具体实现中。")]),v._v(" "),_("p",[v._v("实例：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("学校有很多课程，课程有一门是Java，需要打印课程ID、名称以及售价。")]),v._v(" "),_("p",[v._v("新建一个接口类 "),_("code",[v._v("ICourse")]),v._v(" 和 Java课程类 "),_("code",[v._v("JavaCourse")]),v._v(" ，"),_("code",[v._v("JavaCourse")]),v._v(" 实现 "),_("code",[v._v("ICourse")]),v._v(" 的接口。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/terwer/upload/img/image-20220414195036258.png",alt:"image-20220414195036258"}})])]),v._v(" "),_("li",[_("p",[v._v("赶上促销活动，Java课程打六折，有几种处理方案")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("第一种")]),v._v(" "),_("p",[_("code",[v._v("ICourse")]),v._v(" 接口新增方法 "),_("code",[v._v("getDiscountPrice()")]),v._v(" ，但是，这样的话，所有实现 "),_("code",[v._v("ICourse")]),v._v(" 接口的方法都要增加一个方法。")])]),v._v(" "),_("li",[_("p",[v._v("第二种")]),v._v(" "),_("p",[v._v("需修改 "),_("code",[v._v("JavaCourse")]),v._v(" 类， 但是，这样会破坏 "),_("code",[v._v("JavaCourse")]),v._v(" 原本稳定的代码，不合理。")])]),v._v(" "),_("li",[_("p",[v._v("第三种")]),v._v(" "),_("p",[v._v("新建一个 "),_("code",[v._v("JavaDiscountCourse")]),v._v(" 类，继承 "),_("code",[v._v("JavaCourse")]),v._v(" ，并增加一个打折方法。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/terwer/upload/img/image-20220414224432172.png",alt:"image-20220414224432172"}})])])])])])])}),[],!1,null,null,null);_.default=e.exports}}]);