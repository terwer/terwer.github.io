(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{384:function(v,_,e){"use strict";e.r(_);var s=e(8),c=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"java-se-lesson-1-面向对象高级"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-se-lesson-1-面向对象高级"}},[v._v("#")]),v._v(" JAVA SE Lesson 1：面向对象高级")]),v._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[v._v("文章更新历史")]),v._v(" "),_("p",[v._v("2022/05/08 fix:修改备注。")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("类是一种抽象的概念，对象是类的一种具体表示形式，是具体的概念。先有类，然后由类来生成对象（"),_("code",[v._v("Object")]),v._v("）。对象又叫做实例（"),_("code",[v._v("Instance")]),v._v("）。")])]),v._v(" "),_("li",[_("p",[v._v("类由两大部分构成：属性以及方法。属性一般用名词来表示， 方法一般用动词来表示。")])]),v._v(" "),_("li",[_("p",[v._v("如果一个 java 源文件中定义了多个类，那么这些类中最多只能有一个类是 "),_("code",[v._v("public")]),v._v(" 的，换句话说，定义的多个类可以都不是 "),_("code",[v._v("public")]),v._v("  的。")])]),v._v(" "),_("li",[_("p",[v._v("在 Java 中进行方法的参数传递时，无论传递的是原生数据类型还是引用类型，参数传递方式统一是传值（"),_("code",[v._v("pass by value")]),v._v("）。 Java 中没有传引用（"),_("code",[v._v("pass by reference")]),v._v("）的概念。")])]),v._v(" "),_("li",[_("p",[v._v("方法重载（"),_("code",[v._v("Overload")]),v._v("）。")]),v._v(" "),_("p",[v._v("表示两个或多个方法名字相同，但方法参数不同。")]),v._v(" "),_("p",[v._v("方法参数不同有两层含义：")]),v._v(" "),_("p",[v._v("1）参数个数不同。")]),v._v(" "),_("p",[v._v("2）参数类型不同。")])])]),v._v(" "),_("p",[_("strong",[v._v("注意：方法的返回值对重载没有任何影响。")])]),v._v(" "),_("ol",{attrs:{start:"6"}},[_("li",[_("p",[v._v("构造方法重载：只需看参数即可。如果想在一个构造方法中调用另外一个构造方法，那么可以使用 "),_("code",[v._v("this")]),v._v("的方式调用，"),_("code",[v._v("this")]),v._v("括号中的参数表示目标构造方法的参数。"),_("code",[v._v("this")]),v._v("必须要作为构造方法的第一条语句，换句话说，"),_("code",[v._v("this")]),v._v("之前不能有任何可执行的代码。")])]),v._v(" "),_("li",[_("p",[v._v("继承（"),_("code",[v._v("Inheritence")]),v._v("）：Java 是单继承的，意味着一个类只能从")]),v._v(" "),_("p",[v._v("另一个类继承（被继承的类叫做父类【基类，"),_("code",[v._v("base class")]),v._v("】， 继承的类叫做子类），Java 中的继承使用 "),_("code",[v._v("extends")]),v._v(" 关键字。")])]),v._v(" "),_("li",[_("p",[v._v("当生成子类对象时，Java 默认首先调用父类的不带参数的构造方法，然后执行该构造方法，生成父类的对象。接下来，再去调用子类的构造方法，生成子类的对象。【要想生成子类的对象，首先需要生成父类的对象，没有父类对象就没有子类对象。比如说：没有父亲，就没有孩子】。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("super")]),v._v(" 关键字："),_("code",[v._v("super")]),v._v(" 表示对父类对象的引用。")])]),v._v(" "),_("li",[_("p",[v._v("如果子类使用 "),_("code",[v._v("super")]),v._v("显式调用父类的某个构造方法，那么在执行的时候就会寻找与 "),_("code",[v._v("super")]),v._v("所对应的构造方法而不会再去寻找父类的不带参数的构造方法。与"),_("code",[v._v("this")]),v._v(" 一样，"),_("code",[v._v("super")]),v._v(" 也必须要作为构造方法的第一条执行语句，前面不能有其他可执行语句。")])]),v._v(" "),_("li",[_("p",[v._v("关于继承的 3 点：")]),v._v(" "),_("p",[v._v("a)父类有的，子类也有")]),v._v(" "),_("p",[v._v("b)父类没有的，子类可以增加")]),v._v(" "),_("p",[v._v("c)父类有的，子类可以改变")])]),v._v(" "),_("li",[_("p",[v._v("关于继承的注意事项")]),v._v(" "),_("p",[v._v("a)构造方法不能被继承")]),v._v(" "),_("p",[v._v("b)方法和属性可以被继承")]),v._v(" "),_("p",[v._v("c)子类的构造方法隐式地调用父类的不带参数的构造方法")]),v._v(" "),_("p",[v._v("d)当父类没有不带参数的构造方法时，子类需要使用 "),_("code",[v._v("super")]),v._v(" 来显式地调用父类的构造方法，"),_("code",[v._v("super")]),v._v("  指的是对父类的引用")]),v._v(" "),_("p",[v._v("e)"),_("code",[v._v("super")]),v._v(" 关键字必须是构造方法中的第一行语句。")])]),v._v(" "),_("li",[_("p",[v._v("方法重写（"),_("code",[v._v("Override")]),v._v("）：又叫做覆写，子类与父类的方法返回类型一样、方法名称一样，参数一样，这样我们说子类与父类的方法构成了重写关系。")])]),v._v(" "),_("li",[_("p",[v._v("方法重写与方法重载之间的关系：重载发生在同一个类内部的两个或多个方法。重写发生在父类与子类之间。")])]),v._v(" "),_("li",[_("p",[v._v("当两个方法形成重写关系时， 可以在子类方法中通过"),_("code",[v._v("super.run")]),v._v("形式调用父类的 "),_("code",[v._v("run")]),v._v("方法，其中 "),_("code",[v._v("super.run")]),v._v("不必放在第一行语句，因此此时父类对象已经构造完毕，先调用父类的"),_("code",[v._v("run")]),v._v("方法还是先调用子类的"),_("code",[v._v("run")]),v._v("方法是根据程序的逻辑决定的。")])]),v._v(" "),_("li",[_("p",[v._v("在定义一个类的时候，如果没有显式指定该类的父类，那么该类就会继承于"),_("code",[v._v("java.lang.Object")]),v._v(" 类（JDK 提供的一个类，"),_("code",[v._v("Object")]),v._v("类是Java 中所有类的直接或间接父类）。")])]),v._v(" "),_("li",[_("p",[v._v("多态（"),_("code",[v._v("Polymorphism")]),v._v("）：我们说子类就是父类（玫瑰是花，男人是人），因此多态的意思就是：父类型的引用可以指向子类的对象。")])])])])}),[],!1,null,null,null);_.default=c.exports}}]);