(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{425:function(_,v,t){"use strict";t.r(v);var p=t(8),l=Object(p.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("p",[_._v("本文阐述了分布式系统中一些常见的协议以及原理分析。")]),_._v(" "),v("h1",{attrs:{id:"分布式一致性协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分布式一致性协议"}},[_._v("#")]),_._v(" 分布式一致性协议")]),_._v(" "),v("blockquote",[v("p",[_._v("2022/03/01 校对完成")]),_._v(" "),v("p",[_._v("文章更新历史")]),_._v(" "),v("p",[_._v("2022/03/01 初稿。")])]),_._v(" "),v("h3",{attrs:{id:"两阶段提交协议-2pc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#两阶段提交协议-2pc"}},[_._v("#")]),_._v(" 两阶段提交协议（2PC）")]),_._v(" "),v("h4",{attrs:{id:"两阶段提交协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#两阶段提交协议"}},[_._v("#")]),_._v(" 两阶段提交协议")]),_._v(" "),v("p",[_._v("两阶段提交协议，简称2PC（2 prepare commit），是比较常见的解决分布式事务的方式。要么所有参与进程都提交事务，要么都取消事务，即实现ACID中的原子性（A）的常用手段。")]),_._v(" "),v("p",[_._v("分布式事务：事务提供一种操作本地数据库的不可分割的一系列操作。要么什么都不做，要么做全套（All or Nothing）。")]),_._v(" "),v("p",[_._v("分布式事务是为了操作不同数据库的不可分割的一系列操作。要么什么都不做，要么做全套（All or Nothing）。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/terwer/upload/img/image-20220320193312964.png",alt:"image-20220320193312964"}})]),_._v(" "),v("h4",{attrs:{id:"_2pc执行流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2pc执行流程"}},[_._v("#")]),_._v(" 2PC执行流程")]),_._v(" "),v("ul",[v("li",[_._v("成功提交事务的流程")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/terwer/upload/img/image-20220320193849595.png",alt:"image-20220320193849595"}})]),_._v(" "),v("ul",[v("li",[v("p",[_._v("阶段一")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("事务询问")]),_._v(" "),v("p",[_._v("协调者向所有事务参与者发送事务内容，询问是否可以执行事务提交操作，并且开始等待各个参与者的响应")])]),_._v(" "),v("li",[v("p",[_._v("执行事务（写本地的undo/redo日志）")])]),_._v(" "),v("li",[v("p",[_._v("各个参与者向事务协调者反馈事务询问的响应")])])])]),_._v(" "),v("li",[v("p",[_._v("阶段二")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("发送提交请求")]),_._v(" "),v("p",[_._v("协调者向所有参与者发送commit请求")])]),_._v(" "),v("li",[v("p",[_._v("事务提交")]),_._v(" "),v("p",[_._v("参与者收到commit请求后，正式执行事务提交操作，完成提交操作后释放整个事务执行期间占用的事务资源")])]),_._v(" "),v("li",[v("p",[_._v("反馈事务提交结果")]),_._v(" "),v("p",[_._v("参与者在完成事务提交后，向协调者发送ack消息")])]),_._v(" "),v("li",[v("p",[_._v("完成事务")]),_._v(" "),v("p",[_._v("协调者接收到参与者发送的ack消息，完成事务")])])])]),_._v(" "),v("li",[v("p",[_._v("中断事务流程")]),_._v(" "),v("p",[_._v("假设任意一个参与者向协调者发送了No响应，或者在等待超时之后，协调者还是无法接收到参与者的响应，那么就会中断事务。")])])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/terwer/upload/img/image-20220320194926824.png",alt:"image-20220320194926824"}})]),_._v(" "),v("ul",[v("li",[v("p",[_._v("阶段一")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("事务询问")]),_._v(" "),v("p",[_._v("协调者向所有事务参与者发送事务内容，询问是否可以执行事务提交操作，并且开始等待各个参与者的响应")])]),_._v(" "),v("li",[v("p",[_._v("执行事务（写本地的undo/redo日志）")])]),_._v(" "),v("li",[v("p",[_._v("各个参与者向事务协调者反馈事务询问的响应")])])])]),_._v(" "),v("li",[v("p",[_._v("阶段二")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("发送回滚请求")]),_._v(" "),v("p",[_._v("协调者向所有参与者发送rollback请求")])]),_._v(" "),v("li",[v("p",[_._v("事务回滚")]),_._v(" "),v("p",[_._v("参与者解释道rollback请求之后，利用在阶段一中记录的undo信息，来执行事务回滚操作。并在完成事务回滚之后释放在整个事务执行期间占用的事务资源。")])]),_._v(" "),v("li",[v("p",[_._v("反馈事务回滚结果")]),_._v(" "),v("p",[_._v("参与者完成事务回滚之后，向协调者发送ack消息")])]),_._v(" "),v("li",[v("p",[_._v("中断事务")]),_._v(" "),v("p",[_._v("协调者接收到所有参与者发送的ack消息之后，完成事务中断")])])])])]),_._v(" "),v("h4",{attrs:{id:"_2pc优缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2pc优缺点"}},[_._v("#")]),_._v(" 2PC优缺点")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("优点")]),_._v(" "),v("p",[_._v("原理简单")])]),_._v(" "),v("li",[v("p",[_._v("缺点")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("同步阻塞")]),_._v(" "),v("p",[_._v("在二阶段提交的执行的过程中，所有参与该事务操作的逻辑都处于堵塞状态。")]),_._v(" "),v("p",[_._v("当参与者占用公共资源时，其他参与者一直处于锁定事务资源的状态中，而无法完成事务操作。")])]),_._v(" "),v("li",[v("p",[_._v("单点问题")]),_._v(" "),v("p",[_._v("若协调器出现问题，那么整个第二阶段的事务提交将无法运转，若协调者在阶段二出现问题，其他参与者一直处于锁定事务资源的状态中，无法完成事务操作")])]),_._v(" "),v("li",[v("p",[_._v("数据不一致")]),_._v(" "),v("p",[_._v("在阶段二中，执行事务提交的的时候，当协调者向所有参与者发送commit请求之后，发生了网络异常，或者，协调者尚未发送commit请求之前发生了崩溃，导致最终只有部分参与者收到了commit请求，就会出现数据不一致的情况")])]),_._v(" "),v("li",[v("p",[_._v("太过保守")]),_._v(" "),v("p",[_._v("在进行事务提交询问的过程中，参与者出现故障而导致协调者始终无法获取所有参与者的响应信息的话，此时协调者只能通过自己的超时机制来判断是否需要终止事务。")]),_._v(" "),v("p",[_._v("这样的策略过于保守，既没有完善的容错机制，任意一个节点的失败都会导致整个事务的失败。")])])])])])])}),[],!1,null,null,null);v.default=l.exports}}]);